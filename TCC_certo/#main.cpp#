#include <bits/stdc++.h>

using namespace std;

struct Individuo {
    string diasDaSemana;
    string codigoVo;
    string codigoAviao;
    string origem;
    string destino;
    string duracao;
    string partida;
};

struct Aviao {
    string tipo;
    string codigo;
    string aeroportoAtual;
    vector<string> vooRealizados;
    int vooInuteis;
};

struct Voo {
    string origem;
    string horaPartida;
    string destino;
    string tipoAviao;
    string codigoVoo;
    string duracao;

};

//no vetor de avioes vao ficar salvo os avioes em valores absolutas nao podendo deletar nenhum aviao
map<string, vector<Aviao> > avioes;
//o map de avioes disponiveis é apenas um artificio auxiliar para conseguir manipular a atribuiçoes de voos
map<string, vector<Aviao> > avioesDisponiveis;


map<int, vector<Voo> > agenda;
vector<Individuo> individuos;
vector<Individuo> aux;

void iniciaParametros() {
    int numeroGeracoes;
    int tamanhoPopulacao;
    int taxaElitismo;
    int taxaMutacao;
    int cruzamento;

}

void insereVooEmAviao(string TipoAviao, string codigoAviao, string codigoVoo, string AeroportoDoVoo);
void apagaAvioesDisponiveis(int posicao);
void imprimiString(string a);
void lerArquivo();
void populacaoInicial();
double calculaFitness(int indiceIndividuo);
void selecao();
void Cruzamento(int indiceIndividuo);
void Mutacao(int indiceIndividuo);
void elitismo();
void correcaoIndividuo();
void lerArquivos();
void imprimiIndividuos();
void imprimiIndividuo(Individuo ind);
bool checkAirplanes();
void montaAgenda();

void imprimeAgenda();
bool ordenaVoo(Voo a, Voo b);
void preencheAgenda();
bool comparaString(string a, string b);
string trataString(string a);
void imprimiFrotaAtribuida();

int main() {
    lerArquivos(); //chamada da funcao para iniciar os parametros
    
    checkAirplanes();
    //imprimiFrotaAtribuida();
    montaAgenda();
    //imprimiFrotaAtribuida();
    //imprimeAgenda();
    //apagaAvioesDisponiveis(0);
    
    //imprimiIndividuos();
    //cout << individuos.size() << endl;
}

string trataString(string a) {
    string b = "";
    for (int i = 1; i < a.size(); i += 2) {
        b.push_back(a[i]);
    }
    return b;

}

/*funcao que armazena nos vetores globais os valores de VOOS*/
void lerArquivos() {
    string line;
    
    
    //string ag, cA,cV,p, c,o, d;
    ifstream myfile("VOO2.txt");
    Individuo teste;
    int contador = 0;
    stringstream buffer;
    if (myfile.is_open()) {
        while (getline(myfile, line)) {
            //cout << "tamanho da linha " << line.size() << endl;
            buffer << line;
            buffer >> teste.diasDaSemana;
            buffer >> teste.codigoVoo;
            buffer >> teste.codigoAviao;
            buffer >> teste.origem;
            buffer >> teste.partida;
            buffer >> teste.destino;
            buffer >> teste.duracao;
            contador++;
            buffer.clear();
            individuos.push_back(teste);
            Voo vooAux;
            vooAux.codigoVoo = teste.codigoVoo;
            vooAux.destino = teste.destino;
            vooAux.duracao = teste.duracao;
            vooAux.horaPartida = teste.partida;
            vooAux.origem = teste.origem;
            vooAux.tipoAviao = teste.codigoAviao;


            for (int j = 0; j < teste.diasDaSemana.size(); j++) {
                if (teste.diasDaSemana[j] != '0') {                
                    agenda[j+1].push_back(vooAux);
                }

            }
            

        }
        myfile.close();
    } else cout << "Unable to open file";
    

    for (int i = 1; i <= 7; i++) {
        vector<Voo> aux;
        aux = agenda[i];

        sort(aux.begin(), aux.end(), ordenaVoo);


        agenda[i].clear();
        agenda[i] = aux;
        /*
        for (int j = 0; j < aux.size(); j++) {
            cout << agenda[i][j].codigoVoo << " ";
            cout << agenda[i][j].destino << " ";
            cout << agenda[i][j].duracao << "-> ";
            cout << agenda[i][j].horaPartida << " ";
            cout << agenda[i][j].tipoAviao << endl;
        }
        */


    }


}

//ordena os voos por hora de partida

bool ordenaVoo(Voo a, Voo b) {
    int tam = 0;
    int horaA = 0;
    int d = 1;
    for (int i = a.horaPartida.size() - 1; i > 0; i--) {
        if (a.horaPartida[i] >= '0' && a.horaPartida[i] <= '9') {
            //cout << a.horaPartida[i];
            horaA += (a.horaPartida[i] - '0') * d;
            d *= 10;
        }
    }
    // horaB
    int horaB = 0;
    d = 1;
    for (int i = b.horaPartida.size() - 1; i > 0; i--) {
        if (b.horaPartida[i] >= '0' && b.horaPartida[i] <= '9') {
            //cout << a.horaPartida[i];
            horaB += (b.horaPartida[i] - '0') * d;
            d *= 10;

        }
    }
    return (a.horaPartida < b.horaPartida);
}

void imprimeAgenda() {
    // imprime a agenda semana
    //Voo aux;
    for (int i = 1; i <= 7; i++) {
        // imprimeVoo = agenda[i];
        cout << "dia da semanaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX " << i << " \n";
        cout << agenda[i].size() << " \n";
        for (int k = 0; k < agenda[i].size(); ++k) {
            cout <<"Codigo->" << agenda[i][k].codigoVoo << " ";
            cout <<"Destino->"<< agenda[i][k].destino << " ";
            cout <<"Duracao->" << agenda[i][k].duracao << " ";
            cout <<"HoraPartida->" <<agenda[i][k].horaPartida << " ";
            cout <<"TipoAviao->" << agenda[i][k].tipoAviao << endl;
        }
        //imprimeVoo.clear();
    }
}

void imprimiAviao(Aviao a) {
    cout << "aeroportoAtual " << a.aeroportoAtual << endl;
    cout << "codigo do aviao " << a.codigo << endl;
    cout << "voo inuteis" << a.vooInuteis << endl;
    cout << "voos realizados" << endl;
    for (int i = 0; i < a.vooRealizados.size(); i++) {
        cout << a.vooRealizados[i] << " ";
    }
    cout << endl;
}

void imprimiIndividuo(Individuo ind) {
    cout << ind.diasDaSemana << endl;
    cout << ind.codigoAviao << endl;
    cout << ind.codigoVoo << endl;
    cout << ind.partida << endl;
    cout << ind.duracao << endl;
}

void imprimiIndividuos() {
    for (int i = 0; i < individuos.size(); i++) {
        imprimiIndividuo(individuos[i]);
    }
}

bool checkAirplanes() {

    ifstream myfile("AVIOES.txt");
    string line, codigo, tipo;
    stringstream buffer;
    Aviao aux;
    /*recebe todos os codigos de avioes marca os valores com 1*/
    if (myfile.is_open()) {
        while (getline(myfile, line)) {
            buffer.clear();
            buffer.str(line);
            trataString(line);
            buffer >> codigo;
            buffer >> tipo;
            aux.codigo = codigo;
            aux.tipo = tipo;
            aux.aeroportoAtual = "NONE";
            aux.vooInuteis = 0;
            //cout <<"Codigo do aviao " << tipo<< endl;
            avioesDisponiveis[tipo].push_back(aux);
            avioes[tipo].push_back(aux);
        }
        myfile.close();
    } else cout << "Unable to open file";
    /*imprime os avioes da companhia area
    for (int i = 0; i < avioesDisponiveis.size(); i++) {
        cout << avioesDisponiveis[i].codigo << " ";
        cout << avioesDisponiveis[i].tipo << " ";
        cout << avioesDisponiveis[i].aeroportoAtual << " ";
        cout << avioesDisponiveis[i].vooRealizados.size() << "\n";
    }
    cout << "numero de avioes disponiveis " << avioesDisponiveis.size() << endl;
     */
    return true;


}
// função que simula a criaçao de uma agenda semana de voo

bool comparaString(string a, string b) {
    for (int i = 0; i < a.size(); i++) {
        if (a[i] != b[i]) {
            cout << "diferentes em  " << a[i] << " e" << b[i] << "||" << endl;
            return false;
        }
    }

    return true;
}

void imprimiFrotaAtribuida() {
    map<string, vector<Aviao> >::iterator it;
    string aux;
    vector<Aviao> auxAviao;
    for (it = avioes.begin(); it != avioes.end(); it++) {
        aux = it->first;
        cout << "Tipo do aviao " << (string) (it->first) << endl;
        auxAviao = it->second;
        for(int i = 0 ; i < auxAviao.size(); i++){
            imprimiAviao(auxAviao[i]);
        }
    }

}



void imprimiString(string a) {
    for (int i = 0; i < a.size(); i++) {
        cout << "[" << a[i] << "]";

    }
    cout << endl;
}

void insereVooEmAviao(string TipoAviao, string codigoAviao, string codigoVoo, string AeroportoDoVoo){
    
    // busca sequencial N*log(N) onde N é o numero de avioes do Tipo que chamou a funcao
    int tam = avioes[TipoAviao].size();
    cout <<"tamanho " << tam << endl;
    for(int i = 0; i < tam; i++){        
        if(avioes[TipoAviao][i].codigo == codigoAviao){
            avioes[TipoAviao][i].vooRealizados.push_back(codigoVoo);
            if(avioes[TipoAviao][i].aeroportoAtual != AeroportoDoVoo){
                avioes[TipoAviao][i].vooInuteis++;
            }
        }        
    }
} 




void montaAgenda() {
    int contador = 0;
    vector<Aviao> AviaoAux;
    map<string, vector<Aviao> >::iterator it2;

    for (int dia = 1; dia <= 7; dia++) {
        vector<Voo> vooDia; // vetor auxiliar para manipular os dias
        vooDia = agenda[dia]; // cada map de int, vector de voos representa um dia
        vector< Aviao>::iterator it; // iterator auxiliar pra operaçẽos no vector
        //varre todos os voos do dia
        for (int vook = 0; vook < vooDia.size(); vook++) {
            contador++;
            string tipoAviao = agenda[dia][vook].tipoAviao;
            // funcao random para gerar numeros aleatorios de forma rapida
            std::random_device rd; // only used once to initialise (seed) engine
            std::mt19937 rng(rd()); // random-number engine used (Mersenne-Twister in this case)  
            std::uniform_int_distribution<int> uni(1, avioesDisponiveis[tipoAviao].size());
            auto randNumber = uni(rng);

            // busca os avioes nos avioes disponiveis

            it2 = avioesDisponiveis.find(tipoAviao);
            AviaoAux = it2->second;            
            Aviao Av;
            Av = AviaoAux[randNumber-1];

            //cria variaveis para inserir no vetor de avioes absolutos
            string codigoA, codigoV;
            codigoA = Av.codigo;
            codigoV = agenda[dia][vook].codigoVoo;
            string Aero = agenda[dia][vook].origem;

            insereVooEmAviao(tipoAviao, codigoA, codigoV, Aero);
            cout <<"posicao randomica " << randNumber << endl;
            avioesDisponiveis[tipo].erase(avioesDisponiveis[tipo].begin()+randNumber);

            //it = avioesDisponiveis[tipoAviao].begin(); // iterator aponta para o começo da lista
           // avioesDisponiveis[tipoAviao].erase(it);
             // iterator apaga da posicao sorteada


            // marca o tempo de volta em disponiveis



            //cout <<  "aviao Sorteado " << tipoAviao << "tamanho da frota do aviao " << AviaoAux.size()<< endl;
            
        }
    }
    cout << "numero de voos realizados " << contador;
}










